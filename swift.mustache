import Foundation

/// {{{request.name}}}
/// {{{method}}} {{{url.base}}}
func {{{method}}}{{{codeSlug}}}Request() async throws {
    {{! ----- Headers ----- }}
    {{#headers.has_headers}}
    let headers = [
    {{#headers.header_list}}
        "{{{header_name}}}":"{{{header_value}}}",
    {{/headers.header_list}}
    ]

    {{/headers.has_headers}}
    {{! ----- URL Parameters ----- }}
    {{#has_params_to_encode}}
    let parameters = [
    {{#url.params}}
        "{{{name}}}":"{{{value}}}",
    {{/url.params}}
    ]

    {{/has_params_to_encode}}
    {{! ----- Form URL-Encoded Body ----- }}
    {{#body.has_url_encoded_body}}
    // Form URL-Encoded Body
    let body = [
    {{#body.url_encoded_body}}
        "{{{name}}}":"{{{value}}}",
    {{/body.url_encoded_body}}
    ]

    {{/body.has_url_encoded_body}}
    {{! ----- JSON Body ----- }}
    {{#body.has_json_body}}
    // JSON Body
    {{{body.json_body_object}}}

    {{/body.has_json_body}}
    {{#has_params_to_encode}}var{{/has_params_to_encode}}{{^has_params_to_encode}}let{{/has_params_to_encode}} components = URLComponents(string: {{#has_params_to_encode}}"{{{url.base}}}"{{/has_params_to_encode}}{{^has_params_to_encode}}"{{{url.fullpath}}}"{{/has_params_to_encode}})!

    {{#has_params_to_encode}}
    for parameter in parameters {
    if parameter.value.lowercased() == "null" { continue }
        components.queryItems?.append(URLQueryItem(name: parameter.key, value: parameter.value))
    }

    {{/has_params_to_encode}}
    {{! ----- Request ----- }}
    // Create request with HTTP method
    var request = URLRequest(url: components.url!)
    request.httpMethod = "{{{method}}}".uppercased()
    {{#body.has_short_body}}
    request.httpBody = "{{{body.short_body}}}".data(using: String.Encoding.utf8, allowLossyConversion: false)

    {{/body.has_short_body}}
    {{^body.has_short_body}}
    request.httpBody = try JSONSerialization.data(withJSONObject: body, options: [])

    {{/body.has_short_body}}
    {{#headers.has_headers}}
    {{! ----- Add Headers ----- }}
    // Add headers to request
    _ = headers.map { key, value in
        request.addValue(value, forHTTPHeaderField: key)
    }

    {{/headers.has_headers}}
    {{! ----- Basic Auth ----- }}
    {{#httpBasicAuth}}
    let loginString = String(format: "%@:%@", "{{httpBasicAuth.username}}", "{{httpBasicAuth.password}}")
    let loginData = loginString.data(using: String.Encoding.utf8)!
    let base64LoginString = loginData.base64EncodedString()
    request.addValue("Basic \(base64LoginString)", forHTTPHeaderField: "Authorization")

    {{/httpBasicAuth}}
    {{! ----- DataTask ----- }}
    let (data, response) = try await URLSession.shared.data(for: request, delegate: nil)
    print("Response: \(response.debugDescription)")
    print("Data: \(String(data: data, encoding: .utf8) ?? "Unable to render data as UTF-8 string")")
    //let json = try JSONSerialization.jsonObject(with: data, options: [])
    //print("JSON: \(json)")
}

{{! ----- Running Function ----- }}
Task {
    try await {{{method}}}{{{codeSlug}}}Request()
}

{{! ----- Helpers for Playgrounds & CLI ----- }}
//sleep(3) // useful for playgrounds, keep app running long enough for task to finish
//_ = readLine() // useful for command line tool testing to keep the console open